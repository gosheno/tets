// GetAveragePriceNoCache —á–∏—Ç–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –≤—Å–µ—Ö NFT –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
package botutils

import (
	"bufio"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/go-redis/redis/v8"
)

const (
	apiKey          = "1759093403351-mainnet-9508047-r-Rodf2lVdSIS22ecj6daQcNQTSZLiGTJmmrfJi0Xo2gdppFPU"
	baseURL         = "https://api.getgems.io/public-api/v1/nft/history/"
	defaultPrice    = 1.4
	requestInterval = 770 * time.Millisecond
)


type Response struct {
	Response struct {
		Items []Item `json:"items"`
	} `json:"response"`
	Success bool `json:"success"`
}

type Item struct {
	TypeData struct {
		Type  string `json:"type"`
		Price string `json:"price,omitempty"`
	} `json:"typeData"`
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É NFT —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func getLastPrice(address string) float64 {
	url := fmt.Sprintf("%s%s?limit=1&types=mint&types=sold", baseURL, address)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:", err)
		return defaultPrice
	}
	req.Header.Add("accept", "application/json")
	req.Header.Add("Authorization", apiKey)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞:", err)
		return defaultPrice
	}
	defer resp.Body.Close()

	var result Response
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON:", err)
		return defaultPrice
	}

	if len(result.Response.Items) == 0 {
		log.Printf("‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è NFT %s, –∏—Å–ø–æ–ª—å–∑—É–µ–º defaultPrice %.2f\n", address, defaultPrice)
		return defaultPrice
	}

	lastItem := result.Response.Items[0]
	var price float64
	switch lastItem.TypeData.Type {
	case "sold":
		price, err = strconv.ParseFloat(lastItem.TypeData.Price, 64)
		if err != nil || price <= 0 {
			log.Printf("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è NFT %s, –∏—Å–ø–æ–ª—å–∑—É–µ–º defaultPrice %.2f\n", address, defaultPrice)
			price = defaultPrice
		}
	case "mint":
		price = defaultPrice
	default:
		log.Printf("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ '%s' –¥–ª—è NFT %s, –∏—Å–ø–æ–ª—å–∑—É–µ–º defaultPrice %.2f\n",
			lastItem.TypeData.Type, address, defaultPrice)
		price = defaultPrice
	}
	return price
}

// GetAveragePrice —á–∏—Ç–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –≤—Å–µ—Ö NFT —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func GetAveragePrice(redisClient *redis.Client, sendProgress func(text string)) (float64, bool) {
	cacheKey := "nft_avg_price"
	cached, err := GetValue(redisClient, cacheKey)
	sendProgress("—â–∞ —á–µ–∫–Ω—É")
	time.Sleep(1 * time.Second) // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è UX
	if err == nil && cached != "" {
		price, err := strconv.ParseFloat(cached, 64)
		if err == nil {
			fmt.Println("[Redis] –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∫–µ—à–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã:", price)
			return price, true
		}
	}
	return GetAveragePriceNoCache(redisClient, sendProgress)
}

func GetAveragePriceNoCache(redisClient *redis.Client, sendProgress func(text string)) (float64, bool) {
	cacheKey := "nft_avg_price"
	file, err := os.Open("nft_addresses.txt")
	sendProgress("–ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å, —Å—á–∏—Ç—ã–≤–∞—é –∞–¥—Ä–µ—Å–∞..." + "\n" + "üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 0 –∏–∑ 1000 NFT")

	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:", err)
		sendProgress("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∞–¥—Ä–µ—Å–æ–≤")
		return defaultPrice, false
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)

	// –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	var total int
	for scanner.Scan() {
		total++
	}
	if err := scanner.Err(); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
		sendProgress("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞–¥—Ä–µ—Å–æ–≤")
		return defaultPrice, false
	}

	// –°–±—Ä–æ—Å —Å–∫–∞–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
	file.Seek(0, 0)
	scanner = bufio.NewScanner(file)

	ticker := time.NewTicker(requestInterval)
	defer ticker.Stop()

	var sum float64
	var count int
	log.Printf("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ NFT –Ω–∞—á–∞—Ç–∞")
	for scanner.Scan() {
		address := scanner.Text()
		<-ticker.C // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
		lastPrice := getLastPrice(address)
		sum += lastPrice
		count++
		if count%10 == 0 || count == total {
			
			var msg = fmt.Sprintf("–ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å, —Å—á–∏—Ç—ã–≤–∞—é –∞–¥—Ä–µ—Å–∞..." + "\n" + "üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –∏–∑ %d NFT", count, total)
			sendProgress(msg)
			log.Printf("üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –∏–∑ %d NFT, —Ç–µ–∫—É—â–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: %.2f TON",
				count, total, sum/float64(count))
		}
		if count ==20{
			break
		}
	}

	if err := scanner.Err(); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
		return defaultPrice, false
	}

	log.Printf("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ NFT")
	sendProgress("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	time.Sleep(1 * time.Second) // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è UX
	if count == 0 {
		return defaultPrice, false
	}
	avgPrice := sum / float64(count)
	err = redisClient.Set(Ctx, cacheKey, fmt.Sprintf("%f", avgPrice), time.Hour*10).Err()
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Redis:", err)
	}
	return avgPrice, false
}
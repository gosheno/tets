package getgems

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	"github.com/joho/godotenv"
	"github.com/xssnick/tonutils-go/address"
)

type TonNftItem struct {
	Address string `json:"address"` // raw —Ñ–æ—Ä–º–∞—Ç: 0:HEX
}

type TonCollectionResponse struct {
	NFTs  []TonNftItem `json:"nft_items"`
	Total int          `json:"total"`
}

func getTonCollectionNFTs(collectionAddr string) ([]string, error) {
	var all []string
	offset := 0
	limit := 1000

	for {
		url := fmt.Sprintf(
			"https://tonapi.io/v2/nfts/collections/%s/items?limit=%d&offset=%d",
			collectionAddr, limit, offset,
		)

		req, err := http.NewRequest("GET", url, nil)
		if err != nil {
			return nil, err
		}

		if token := os.Getenv("TONAPI_TOKEN"); token != "" {
			req.Header.Set("Authorization", "Bearer "+token)
		}

		client := &http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			return nil, err
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, fmt.Errorf("status %s: %s", resp.Status, string(body))
		}

		bodyBytes, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, err
		}

		var res TonCollectionResponse
		if err := json.Unmarshal(bodyBytes, &res); err != nil {
			return nil, err
		}

		for _, item := range res.NFTs {
			addr, err := address.ParseRawAddr(item.Address)
			if err != nil {
				log.Println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:", item.Address, err)
				continue
			}
			all = append(all, addr.String())
		}

		log.Printf("üì¶ Offset %d: –∑–∞–≥—Ä—É–∂–µ–Ω–æ %d NFT (–≤—Å–µ–≥–æ %d)", offset, len(res.NFTs), len(all))

		if len(res.NFTs) < limit {
			break
		}
		offset += limit
	}

	return all, nil
}

func mainaddr() {
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	collection := "EQAnmo8tBH8gSErzWDrdlJiF8kxgfJEynKMIBxL2MkuHvPBc"
	nfts, err := getTonCollectionNFTs(collection)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("‚úÖ –í—Å–µ–≥–æ NFT: %d\n", len(nfts))

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
	file, err := os.Create("nft_addresses.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å –≤ —Ñ–∞–π–ª
	for _, addr := range nfts {
	_, err := file.WriteString(addr + "\n")
	if err != nil {
		log.Fatal(err)
	}
}
	fmt.Println("üìÅ –ê–¥—Ä–µ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ nft_addresses.txt")
}
